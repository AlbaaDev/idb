{"version":3,"file":"ngxs-store-internals-testing.js","sources":["ng://@ngxs/store/internals/testing/helpers/ngxs-test.component.ts","ng://@ngxs/store/internals/testing/helpers/ngxs-test.module.ts","ng://@ngxs/store/internals/testing/ngxs.setup.ts","ng://@ngxs/store/internals/testing/fresh-platform.ts"],"sourcesContent":["import { AfterViewInit, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: ''\n})\nexport class NgxsTestComponent implements OnInit, AfterViewInit {\n  public ngOnInit(): void {}\n  public ngAfterViewInit(): void {}\n}\n","import { ApplicationRef, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgxsTestComponent } from './ngxs-test.component';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [NgxsTestComponent],\n  entryComponents: [NgxsTestComponent]\n})\nexport class NgxsTestModule {\n  public static ngDoBootstrap(app: ApplicationRef): void {\n    app.bootstrap(NgxsTestComponent);\n  }\n}\n","import { ApplicationRef } from '@angular/core';\nimport { TestBed, TestBedStatic } from '@angular/core/testing';\nimport { DOCUMENT } from '@angular/common';\nimport { ÉµBrowserDomAdapter as BrowserDomAdapter } from '@angular/platform-browser';\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting\n} from '@angular/platform-browser-dynamic/testing';\nimport { NgxsModule, Store } from '@ngxs/store';\n\nimport { NgxsTestModule } from './helpers/ngxs-test.module';\nimport { NgxsOptionsTesting, NgxsTesting } from './symbol';\n\nexport class NgxsTestBed {\n  public static configureTestingStates(options: NgxsOptionsTesting): NgxsTesting {\n    this.resetTestBed();\n\n    if (options.before) {\n      options.before();\n    }\n\n    TestBed.configureTestingModule({\n      imports: [\n        NgxsTestModule,\n        NgxsModule.forRoot(options.states || [], options.ngxsOptions || {}),\n        ...(options.imports || [])\n      ]\n    }).compileComponents();\n\n    NgxsTestBed.ngxsBootstrap();\n\n    return {\n      get store(): Store {\n        return TestBed.inject(Store);\n      },\n      get getTestBed(): TestBedStatic {\n        return TestBed;\n      }\n    };\n  }\n\n  private static ngxsBootstrap(): void {\n    NgxsTestBed.createRootNode();\n    NgxsTestModule.ngDoBootstrap(TestBed.inject(ApplicationRef));\n  }\n\n  private static resetTestBed(): void {\n    TestBed.resetTestEnvironment();\n    TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());\n  }\n\n  private static createRootNode(selector = 'app-root'): void {\n    const document = TestBed.inject(DOCUMENT);\n    const adapter = new BrowserDomAdapter();\n    const root = adapter.createElement(selector);\n    document.body.appendChild(root);\n  }\n}\n","import { TestBed } from '@angular/core/testing';\nimport { DOCUMENT } from '@angular/common';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { destroyPlatform, createPlatform } from '@angular/core';\n\nfunction createRootElement() {\n  const document = TestBed.inject(DOCUMENT);\n  const root = getDOM().createElement('app-root', document);\n  document.body.appendChild(root);\n}\n\nfunction removeRootElement() {\n  const root: Element = document.getElementsByTagName('app-root').item(0)!;\n  try {\n    document.body.removeChild(root);\n  } catch {}\n}\n\nfunction destroyPlatformBeforeBootstrappingTheNewOne() {\n  destroyPlatform();\n  createRootElement();\n}\n\n// As we create our custom platform via `bootstrapModule`\n// we have to destroy it after assetions and revert\n// the previous one\nfunction resetPlatformAfterBootstrapping() {\n  removeRootElement();\n  destroyPlatform();\n  createPlatform(TestBed);\n}\n\nexport function freshPlatform(fn: (done?: VoidFunction) => Promise<void>) {\n  let done: VoidFunction | null = null,\n    whenDoneIsCalledPromise: Promise<void> | null = null;\n\n  const hasDoneArgument = fn.length === 1;\n\n  if (hasDoneArgument) {\n    whenDoneIsCalledPromise = new Promise<void>(resolve => {\n      done = resolve;\n    });\n  }\n\n  return async function testWithAFreshPlatform() {\n    try {\n      destroyPlatformBeforeBootstrappingTheNewOne();\n\n      if (done !== null) {\n        await fn(done);\n        await whenDoneIsCalledPromise!;\n      } else {\n        await fn();\n      }\n    } finally {\n      resetPlatformAfterBootstrapping();\n    }\n  };\n}\n"],"names":["BrowserDomAdapter","getDOM"],"mappings":"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"}