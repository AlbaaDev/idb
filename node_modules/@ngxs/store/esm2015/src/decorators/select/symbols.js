/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ɵivyEnabled } from '@angular/core';
import { propGetter } from '../../internal/internals';
import { SelectFactory } from './select-factory';
import { throwSelectFactoryNotConnectedError } from '../../configs/messages.config';
/** @type {?} */
const DOLLAR_CHAR_CODE = 36;
/**
 * @template T
 * @param {?} selector
 * @param {?} store
 * @return {?}
 */
export function createSelectObservable(selector, store) {
    // We're doing this stuff to tree-shake the `SelectFactory` when the user
    // is running Ivy since NGXS will select the state from the provided `store` argument.
    return ɵivyEnabled
        ? createSelectObservableIvy(selector, store)
        : createSelectObservableViewEngine(selector);
}
/**
 * @param {?} config
 * @param {?} name
 * @param {?=} rawSelector
 * @param {?=} paths
 * @return {?}
 */
export function createSelectorFn(config, name, rawSelector, paths = []) {
    rawSelector = rawSelector || removeDollarAtTheEnd(name);
    if (typeof rawSelector !== 'string') {
        return rawSelector;
    }
    else {
        /** @type {?} */
        const propsArray = paths.length
            ? [rawSelector, ...paths]
            : rawSelector.split('.');
        return ɵivyEnabled
            ? createSelectorFnIvy(propsArray, config)
            : createSelectorFnViewEngine(propsArray);
    }
}
/**
 * \@example If `foo$` => make it just `foo`
 * @param {?} name
 * @return {?}
 */
export function removeDollarAtTheEnd(name) {
    /** @type {?} */
    const lastCharIndex = name.length - 1;
    /** @type {?} */
    const dollarAtTheEnd = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;
    return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;
}
/**
 * @template T
 * @param {?} selector
 * @param {?} store
 * @return {?}
 */
function createSelectObservableIvy(selector, store) {
    return ngDevMode && !store ? throwSelectFactoryNotConnectedError() : (/** @type {?} */ (store)).select(selector);
}
/**
 * @template T
 * @param {?} selector
 * @return {?}
 */
function createSelectObservableViewEngine(selector) {
    return SelectFactory.store
        ? SelectFactory.store.select(selector)
        : throwSelectFactoryNotConnectedError();
}
/**
 * @param {?} propsArray
 * @param {?} config
 * @return {?}
 */
function createSelectorFnIvy(propsArray, config) {
    return ngDevMode && !config
        ? throwSelectFactoryNotConnectedError()
        : propGetter(propsArray, (/** @type {?} */ (config)));
}
/**
 * @param {?} propsArray
 * @return {?}
 */
function createSelectorFnViewEngine(propsArray) {
    return propGetter(propsArray, (/** @type {?} */ (SelectFactory.config)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL2RlY29yYXRvcnMvc2VsZWN0L3N5bWJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBUSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdqRCxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7TUFFOUUsZ0JBQWdCLEdBQUcsRUFBRTs7Ozs7OztBQUUzQixNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLFFBQWEsRUFDYixLQUFtQjtJQUVuQix5RUFBeUU7SUFDekUsc0ZBQXNGO0lBQ3RGLE9BQU8sV0FBVztRQUNoQixDQUFDLENBQUMseUJBQXlCLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQztRQUM1QyxDQUFDLENBQUMsZ0NBQWdDLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakQsQ0FBQzs7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLE1BQXlCLEVBQ3pCLElBQVksRUFDWixXQUFpQixFQUNqQixRQUFrQixFQUFFO0lBRXBCLFdBQVcsR0FBRyxXQUFXLElBQUksb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFeEQsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLEVBQUU7UUFDbkMsT0FBTyxXQUFXLENBQUM7S0FDcEI7U0FBTTs7Y0FDQyxVQUFVLEdBQWEsS0FBSyxDQUFDLE1BQU07WUFDdkMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUUxQixPQUFPLFdBQVc7WUFDaEIsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUM7WUFDekMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQzVDO0FBQ0gsQ0FBQzs7Ozs7O0FBS0QsTUFBTSxVQUFVLG9CQUFvQixDQUFDLElBQVk7O1VBQ3pDLGFBQWEsR0FBVyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7O1VBQ3ZDLGNBQWMsR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLGdCQUFnQjtJQUNuRixPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUM5RCxDQUFDOzs7Ozs7O0FBY0QsU0FBUyx5QkFBeUIsQ0FDaEMsUUFBYSxFQUNiLEtBQW1CO0lBRW5CLE9BQU8sU0FBUyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxtQ0FBbUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxtQkFBQSxLQUFLLEVBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0YsQ0FBQzs7Ozs7O0FBRUQsU0FBUyxnQ0FBZ0MsQ0FBVSxRQUFhO0lBQzlELE9BQU8sYUFBYSxDQUFDLEtBQUs7UUFDeEIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUN0QyxDQUFDLENBQUMsbUNBQW1DLEVBQUUsQ0FBQztBQUM1QyxDQUFDOzs7Ozs7QUFFRCxTQUFTLG1CQUFtQixDQUFDLFVBQW9CLEVBQUUsTUFBeUI7SUFDMUUsT0FBTyxTQUFTLElBQUksQ0FBQyxNQUFNO1FBQ3pCLENBQUMsQ0FBQyxtQ0FBbUMsRUFBRTtRQUN2QyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxtQkFBQSxNQUFNLEVBQUMsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7Ozs7O0FBRUQsU0FBUywwQkFBMEIsQ0FBQyxVQUFvQjtJQUN0RCxPQUFPLFVBQVUsQ0FBQyxVQUFVLEVBQUUsbUJBQUEsYUFBYSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7QUFDdkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUsIMm1aXZ5RW5hYmxlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJy4uLy4uL3N0b3JlJztcbmltcG9ydCB7IE5neHNDb25maWcgfSBmcm9tICcuLi8uLi9zeW1ib2xzJztcbmltcG9ydCB7IHByb3BHZXR0ZXIgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9pbnRlcm5hbHMnO1xuaW1wb3J0IHsgU2VsZWN0RmFjdG9yeSB9IGZyb20gJy4vc2VsZWN0LWZhY3RvcnknO1xuaW1wb3J0IHsgU3RhdGVUb2tlbiB9IGZyb20gJy4uLy4uL3N0YXRlLXRva2VuL3N0YXRlLXRva2VuJztcbmltcG9ydCB7IEV4dHJhY3RUb2tlblR5cGUgfSBmcm9tICcuLi8uLi9zdGF0ZS10b2tlbi9zeW1ib2xzJztcbmltcG9ydCB7IHRocm93U2VsZWN0RmFjdG9yeU5vdENvbm5lY3RlZEVycm9yIH0gZnJvbSAnLi4vLi4vY29uZmlncy9tZXNzYWdlcy5jb25maWcnO1xuXG5jb25zdCBET0xMQVJfQ0hBUl9DT0RFID0gMzY7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RPYnNlcnZhYmxlPFQgPSBhbnk+KFxuICBzZWxlY3RvcjogYW55LFxuICBzdG9yZTogU3RvcmUgfCBudWxsXG4pOiBPYnNlcnZhYmxlPFQ+IHtcbiAgLy8gV2UncmUgZG9pbmcgdGhpcyBzdHVmZiB0byB0cmVlLXNoYWtlIHRoZSBgU2VsZWN0RmFjdG9yeWAgd2hlbiB0aGUgdXNlclxuICAvLyBpcyBydW5uaW5nIEl2eSBzaW5jZSBOR1hTIHdpbGwgc2VsZWN0IHRoZSBzdGF0ZSBmcm9tIHRoZSBwcm92aWRlZCBgc3RvcmVgIGFyZ3VtZW50LlxuICByZXR1cm4gybVpdnlFbmFibGVkXG4gICAgPyBjcmVhdGVTZWxlY3RPYnNlcnZhYmxlSXZ5KHNlbGVjdG9yLCBzdG9yZSlcbiAgICA6IGNyZWF0ZVNlbGVjdE9ic2VydmFibGVWaWV3RW5naW5lKHNlbGVjdG9yKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yRm4oXG4gIGNvbmZpZzogTmd4c0NvbmZpZyB8IG51bGwsXG4gIG5hbWU6IHN0cmluZyxcbiAgcmF3U2VsZWN0b3I/OiBhbnksXG4gIHBhdGhzOiBzdHJpbmdbXSA9IFtdXG4pOiBTZWxlY3RvckZuIHtcbiAgcmF3U2VsZWN0b3IgPSByYXdTZWxlY3RvciB8fCByZW1vdmVEb2xsYXJBdFRoZUVuZChuYW1lKTtcblxuICBpZiAodHlwZW9mIHJhd1NlbGVjdG9yICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiByYXdTZWxlY3RvcjtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwcm9wc0FycmF5OiBzdHJpbmdbXSA9IHBhdGhzLmxlbmd0aFxuICAgICAgPyBbcmF3U2VsZWN0b3IsIC4uLnBhdGhzXVxuICAgICAgOiByYXdTZWxlY3Rvci5zcGxpdCgnLicpO1xuXG4gICAgcmV0dXJuIMm1aXZ5RW5hYmxlZFxuICAgICAgPyBjcmVhdGVTZWxlY3RvckZuSXZ5KHByb3BzQXJyYXksIGNvbmZpZylcbiAgICAgIDogY3JlYXRlU2VsZWN0b3JGblZpZXdFbmdpbmUocHJvcHNBcnJheSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAZXhhbXBsZSBJZiBgZm9vJGAgPT4gbWFrZSBpdCBqdXN0IGBmb29gXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVEb2xsYXJBdFRoZUVuZChuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBsYXN0Q2hhckluZGV4OiBudW1iZXIgPSBuYW1lLmxlbmd0aCAtIDE7XG4gIGNvbnN0IGRvbGxhckF0VGhlRW5kOiBib29sZWFuID0gbmFtZS5jaGFyQ29kZUF0KGxhc3RDaGFySW5kZXgpID09PSBET0xMQVJfQ0hBUl9DT0RFO1xuICByZXR1cm4gZG9sbGFyQXRUaGVFbmQgPyBuYW1lLnNsaWNlKDAsIGxhc3RDaGFySW5kZXgpIDogbmFtZTtcbn1cblxuZXhwb3J0IHR5cGUgU2VsZWN0b3JGbiA9XG4gIHwgKChzdGF0ZTogYW55LCAuLi5zdGF0ZXM6IGFueVtdKSA9PiBhbnkpXG4gIHwgc3RyaW5nXG4gIHwgVHlwZTxhbnk+XG4gIHwgU3RhdGVUb2tlbjxhbnk+O1xuXG5leHBvcnQgdHlwZSBQcm9wZXJ0eVR5cGU8VD4gPSBUIGV4dGVuZHMgU3RhdGVUb2tlbjxhbnk+XG4gID8gT2JzZXJ2YWJsZTxFeHRyYWN0VG9rZW5UeXBlPFQ+PlxuICA6IFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueVxuICA/IE9ic2VydmFibGU8UmV0dXJuVHlwZTxUPj5cbiAgOiBhbnk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdE9ic2VydmFibGVJdnk8VCA9IGFueT4oXG4gIHNlbGVjdG9yOiBhbnksXG4gIHN0b3JlOiBTdG9yZSB8IG51bGxcbik6IE9ic2VydmFibGU8VD4ge1xuICByZXR1cm4gbmdEZXZNb2RlICYmICFzdG9yZSA/IHRocm93U2VsZWN0RmFjdG9yeU5vdENvbm5lY3RlZEVycm9yKCkgOiBzdG9yZSEuc2VsZWN0KHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0T2JzZXJ2YWJsZVZpZXdFbmdpbmU8VCA9IGFueT4oc2VsZWN0b3I6IGFueSk6IE9ic2VydmFibGU8VD4ge1xuICByZXR1cm4gU2VsZWN0RmFjdG9yeS5zdG9yZVxuICAgID8gU2VsZWN0RmFjdG9yeS5zdG9yZS5zZWxlY3Qoc2VsZWN0b3IpXG4gICAgOiB0aHJvd1NlbGVjdEZhY3RvcnlOb3RDb25uZWN0ZWRFcnJvcigpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RvckZuSXZ5KHByb3BzQXJyYXk6IHN0cmluZ1tdLCBjb25maWc6IE5neHNDb25maWcgfCBudWxsKSB7XG4gIHJldHVybiBuZ0Rldk1vZGUgJiYgIWNvbmZpZ1xuICAgID8gdGhyb3dTZWxlY3RGYWN0b3J5Tm90Q29ubmVjdGVkRXJyb3IoKVxuICAgIDogcHJvcEdldHRlcihwcm9wc0FycmF5LCBjb25maWchKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JGblZpZXdFbmdpbmUocHJvcHNBcnJheTogc3RyaW5nW10pIHtcbiAgcmV0dXJuIHByb3BHZXR0ZXIocHJvcHNBcnJheSwgU2VsZWN0RmFjdG9yeS5jb25maWchKTtcbn1cbiJdfQ==