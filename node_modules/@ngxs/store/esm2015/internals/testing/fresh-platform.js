/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import { destroyPlatform, createPlatform } from '@angular/core';
/**
 * @return {?}
 */
function createRootElement() {
    /** @type {?} */
    const document = TestBed.inject(DOCUMENT);
    /** @type {?} */
    const root = getDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
/**
 * @return {?}
 */
function removeRootElement() {
    /** @type {?} */
    const root = (/** @type {?} */ (document.getElementsByTagName('app-root').item(0)));
    try {
        document.body.removeChild(root);
    }
    catch (_a) { }
}
/**
 * @return {?}
 */
function destroyPlatformBeforeBootstrappingTheNewOne() {
    destroyPlatform();
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
/**
 * @return {?}
 */
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    createPlatform(TestBed);
}
/**
 * @param {?} fn
 * @return {?}
 */
export function freshPlatform(fn) {
    /** @type {?} */
    let done = null;
    /** @type {?} */
    let whenDoneIsCalledPromise = null;
    /** @type {?} */
    const hasDoneArgument = fn.length === 1;
    if (hasDoneArgument) {
        whenDoneIsCalledPromise = new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            done = resolve;
        }));
    }
    return (/**
     * @return {?}
     */
    function testWithAFreshPlatform() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                destroyPlatformBeforeBootstrappingTheNewOne();
                if (done !== null) {
                    yield fn(done);
                    yield (/** @type {?} */ (whenDoneIsCalledPromise));
                }
                else {
                    yield fn();
                }
            }
            finally {
                resetPlatformAfterBootstrapping();
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlc2gtcGxhdGZvcm0uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy8iLCJzb3VyY2VzIjpbImZyZXNoLXBsYXRmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBRWhFLFNBQVMsaUJBQWlCOztVQUNsQixRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7O1VBQ25DLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQztJQUN6RCxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxDQUFDOzs7O0FBRUQsU0FBUyxpQkFBaUI7O1VBQ2xCLElBQUksR0FBWSxtQkFBQSxRQUFRLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDO0lBQ3hFLElBQUk7UUFDRixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNqQztJQUFDLFdBQU0sR0FBRTtBQUNaLENBQUM7Ozs7QUFFRCxTQUFTLDJDQUEyQztJQUNsRCxlQUFlLEVBQUUsQ0FBQztJQUNsQixpQkFBaUIsRUFBRSxDQUFDO0FBQ3RCLENBQUM7Ozs7Ozs7QUFLRCxTQUFTLCtCQUErQjtJQUN0QyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMxQixDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBMEM7O1FBQ2xFLElBQUksR0FBd0IsSUFBSTs7UUFDbEMsdUJBQXVCLEdBQXlCLElBQUk7O1VBRWhELGVBQWUsR0FBRyxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUM7SUFFdkMsSUFBSSxlQUFlLEVBQUU7UUFDbkIsdUJBQXVCLEdBQUcsSUFBSSxPQUFPOzs7O1FBQU8sT0FBTyxDQUFDLEVBQUU7WUFDcEQsSUFBSSxHQUFHLE9BQU8sQ0FBQztRQUNqQixDQUFDLEVBQUMsQ0FBQztLQUNKO0lBRUQ7OztJQUFPLFNBQWUsc0JBQXNCOztZQUMxQyxJQUFJO2dCQUNGLDJDQUEyQyxFQUFFLENBQUM7Z0JBRTlDLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtvQkFDakIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ2YsTUFBTSxtQkFBQSx1QkFBdUIsRUFBQyxDQUFDO2lCQUNoQztxQkFBTTtvQkFDTCxNQUFNLEVBQUUsRUFBRSxDQUFDO2lCQUNaO2FBQ0Y7b0JBQVM7Z0JBQ1IsK0JBQStCLEVBQUUsQ0FBQzthQUNuQztRQUNILENBQUM7S0FBQSxFQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgybVnZXRET00gYXMgZ2V0RE9NIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBkZXN0cm95UGxhdGZvcm0sIGNyZWF0ZVBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvb3RFbGVtZW50KCkge1xuICBjb25zdCBkb2N1bWVudCA9IFRlc3RCZWQuaW5qZWN0KERPQ1VNRU5UKTtcbiAgY29uc3Qgcm9vdCA9IGdldERPTSgpLmNyZWF0ZUVsZW1lbnQoJ2FwcC1yb290JywgZG9jdW1lbnQpO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJvb3QpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVSb290RWxlbWVudCgpIHtcbiAgY29uc3Qgcm9vdDogRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhcHAtcm9vdCcpLml0ZW0oMCkhO1xuICB0cnkge1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQocm9vdCk7XG4gIH0gY2F0Y2gge31cbn1cblxuZnVuY3Rpb24gZGVzdHJveVBsYXRmb3JtQmVmb3JlQm9vdHN0cmFwcGluZ1RoZU5ld09uZSgpIHtcbiAgZGVzdHJveVBsYXRmb3JtKCk7XG4gIGNyZWF0ZVJvb3RFbGVtZW50KCk7XG59XG5cbi8vIEFzIHdlIGNyZWF0ZSBvdXIgY3VzdG9tIHBsYXRmb3JtIHZpYSBgYm9vdHN0cmFwTW9kdWxlYFxuLy8gd2UgaGF2ZSB0byBkZXN0cm95IGl0IGFmdGVyIGFzc2V0aW9ucyBhbmQgcmV2ZXJ0XG4vLyB0aGUgcHJldmlvdXMgb25lXG5mdW5jdGlvbiByZXNldFBsYXRmb3JtQWZ0ZXJCb290c3RyYXBwaW5nKCkge1xuICByZW1vdmVSb290RWxlbWVudCgpO1xuICBkZXN0cm95UGxhdGZvcm0oKTtcbiAgY3JlYXRlUGxhdGZvcm0oVGVzdEJlZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmcmVzaFBsYXRmb3JtKGZuOiAoZG9uZT86IFZvaWRGdW5jdGlvbikgPT4gUHJvbWlzZTx2b2lkPikge1xuICBsZXQgZG9uZTogVm9pZEZ1bmN0aW9uIHwgbnVsbCA9IG51bGwsXG4gICAgd2hlbkRvbmVJc0NhbGxlZFByb21pc2U6IFByb21pc2U8dm9pZD4gfCBudWxsID0gbnVsbDtcblxuICBjb25zdCBoYXNEb25lQXJndW1lbnQgPSBmbi5sZW5ndGggPT09IDE7XG5cbiAgaWYgKGhhc0RvbmVBcmd1bWVudCkge1xuICAgIHdoZW5Eb25lSXNDYWxsZWRQcm9taXNlID0gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB7XG4gICAgICBkb25lID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiB0ZXN0V2l0aEFGcmVzaFBsYXRmb3JtKCkge1xuICAgIHRyeSB7XG4gICAgICBkZXN0cm95UGxhdGZvcm1CZWZvcmVCb290c3RyYXBwaW5nVGhlTmV3T25lKCk7XG5cbiAgICAgIGlmIChkb25lICE9PSBudWxsKSB7XG4gICAgICAgIGF3YWl0IGZuKGRvbmUpO1xuICAgICAgICBhd2FpdCB3aGVuRG9uZUlzQ2FsbGVkUHJvbWlzZSE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBmbigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICByZXNldFBsYXRmb3JtQWZ0ZXJCb290c3RyYXBwaW5nKCk7XG4gICAgfVxuICB9O1xufVxuIl19