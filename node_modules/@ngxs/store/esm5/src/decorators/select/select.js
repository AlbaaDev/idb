/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ɵivyEnabled } from '@angular/core';
import { mergeMap } from 'rxjs/operators';
import { localInject, ensureLocalInjectorCaptured, ensureInjectorNotifierIsCaptured } from '@ngxs/store/internals';
import { Store } from '../../store';
import { NgxsConfig } from '../../symbols';
import { createSelectObservable, createSelectorFn } from './symbols';
/**
 * Decorator for selecting a slice of state from the store.
 * @template T
 * @param {?=} rawSelector
 * @param {...?} paths
 * @return {?}
 */
export function Select(rawSelector) {
    var paths = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        paths[_i - 1] = arguments[_i];
    }
    return (/**
     * @param {?} target
     * @param {?} key
     * @return {?}
     */
    function (target, key) {
        var _a;
        /** @type {?} */
        var name = key.toString();
        /** @type {?} */
        var selectorId = "__" + name + "__selector";
        /** @type {?} */
        var selector = null;
        /** @type {?} */
        var injectorNotifier$ = null;
        if (ɵivyEnabled) {
            injectorNotifier$ = ensureInjectorNotifierIsCaptured(target);
        }
        Object.defineProperties(target, (_a = {},
            _a[selectorId] = {
                writable: true,
                enumerable: false,
                configurable: true
            },
            _a[name] = {
                enumerable: true,
                configurable: true,
                get: /**
                 * @return {?}
                 */
                function () {
                    var _this = this;
                    if (this[selectorId]) {
                        return this[selectorId];
                    }
                    // The `localInject` will be tree-shaken away in apps that
                    // still use the View Engine.
                    if (ɵivyEnabled) {
                        this[selectorId] = (/** @type {?} */ (injectorNotifier$)).pipe(mergeMap((/**
                         * @return {?}
                         */
                        function () {
                            /** @type {?} */
                            var store = localInject(_this, Store);
                            /** @type {?} */
                            var config = localInject(_this, NgxsConfig);
                            selector = selector || createSelectorFn(config, name, rawSelector, paths);
                            return createSelectObservable(selector, store);
                        })));
                    }
                    else {
                        selector = selector || createSelectorFn(null, name, rawSelector, paths);
                        this[selectorId] = createSelectObservable(selector, null);
                    }
                    return this[selectorId];
                }
            },
            _a));
        // Keep this `if` guard here so the below stuff will be tree-shaken away in apps that still use the View Engine.
        if (ɵivyEnabled) {
            ensureLocalInjectorCaptured(target);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvZGVjb3JhdG9ycy9zZWxlY3Qvc2VsZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQ0wsV0FBVyxFQUNYLDJCQUEyQixFQUMzQixnQ0FBZ0MsRUFDakMsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLGdCQUFnQixFQUFjLE1BQU0sV0FBVyxDQUFDOzs7Ozs7OztBQUtqRixNQUFNLFVBQVUsTUFBTSxDQUFJLFdBQWU7SUFBRSxlQUFrQjtTQUFsQixVQUFrQixFQUFsQixxQkFBa0IsRUFBbEIsSUFBa0I7UUFBbEIsOEJBQWtCOztJQUMzRDs7Ozs7SUFBTyxVQUFTLE1BQU0sRUFBRSxHQUFHOzs7WUFDbkIsSUFBSSxHQUFXLEdBQUcsQ0FBQyxRQUFRLEVBQUU7O1lBQzdCLFVBQVUsR0FBRyxPQUFLLElBQUksZUFBWTs7WUFDcEMsUUFBUSxHQUFzQixJQUFJOztZQUNsQyxpQkFBaUIsR0FBa0MsSUFBSTtRQUUzRCxJQUFJLFdBQVcsRUFBRTtZQUNmLGlCQUFpQixHQUFHLGdDQUFnQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzlEO1FBRUQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU07WUFDNUIsR0FBQyxVQUFVLElBQUc7Z0JBQ1osUUFBUSxFQUFFLElBQUk7Z0JBQ2QsVUFBVSxFQUFFLEtBQUs7Z0JBQ2pCLFlBQVksRUFBRSxJQUFJO2FBQ25CO1lBQ0QsR0FBQyxJQUFJLElBQUc7Z0JBQ04sVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLFlBQVksRUFBRSxJQUFJO2dCQUNsQixHQUFHOzs7O29CQUFILGlCQW9CQztvQkFuQkMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7d0JBQ3BCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO3FCQUN6QjtvQkFDRCwwREFBMEQ7b0JBQzFELDZCQUE2QjtvQkFDN0IsSUFBSSxXQUFXLEVBQUU7d0JBQ2YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLG1CQUFBLGlCQUFpQixFQUFDLENBQUMsSUFBSSxDQUN4QyxRQUFROzs7d0JBQUM7O2dDQUNELEtBQUssR0FBRyxXQUFXLENBQUMsS0FBSSxFQUFFLEtBQUssQ0FBQzs7Z0NBQ2hDLE1BQU0sR0FBRyxXQUFXLENBQUMsS0FBSSxFQUFFLFVBQVUsQ0FBQzs0QkFDNUMsUUFBUSxHQUFHLFFBQVEsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQzs0QkFDMUUsT0FBTyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQ2pELENBQUMsRUFBQyxDQUNILENBQUM7cUJBQ0g7eUJBQU07d0JBQ0wsUUFBUSxHQUFHLFFBQVEsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDeEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztxQkFDM0Q7b0JBQ0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzFCLENBQUM7YUFDRjtnQkFDRCxDQUFDO1FBRUgsZ0hBQWdIO1FBQ2hILElBQUksV0FBVyxFQUFFO1lBQ2YsMkJBQTJCLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDLEVBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgybVpdnlFbmFibGVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIGxvY2FsSW5qZWN0LFxuICBlbnN1cmVMb2NhbEluamVjdG9yQ2FwdHVyZWQsXG4gIGVuc3VyZUluamVjdG9yTm90aWZpZXJJc0NhcHR1cmVkXG59IGZyb20gJ0BuZ3hzL3N0b3JlL2ludGVybmFscyc7XG5cbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnLi4vLi4vc3RvcmUnO1xuaW1wb3J0IHsgTmd4c0NvbmZpZyB9IGZyb20gJy4uLy4uL3N5bWJvbHMnO1xuaW1wb3J0IHsgY3JlYXRlU2VsZWN0T2JzZXJ2YWJsZSwgY3JlYXRlU2VsZWN0b3JGbiwgU2VsZWN0b3JGbiB9IGZyb20gJy4vc3ltYm9scyc7XG5cbi8qKlxuICogRGVjb3JhdG9yIGZvciBzZWxlY3RpbmcgYSBzbGljZSBvZiBzdGF0ZSBmcm9tIHRoZSBzdG9yZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdDxUPihyYXdTZWxlY3Rvcj86IFQsIC4uLnBhdGhzOiBzdHJpbmdbXSk6IFByb3BlcnR5RGVjb3JhdG9yIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwga2V5KTogdm9pZCB7XG4gICAgY29uc3QgbmFtZTogc3RyaW5nID0ga2V5LnRvU3RyaW5nKCk7XG4gICAgY29uc3Qgc2VsZWN0b3JJZCA9IGBfXyR7bmFtZX1fX3NlbGVjdG9yYDtcbiAgICBsZXQgc2VsZWN0b3I6IFNlbGVjdG9yRm4gfCBudWxsID0gbnVsbDtcbiAgICBsZXQgaW5qZWN0b3JOb3RpZmllciQ6IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4gfCBudWxsID0gbnVsbDtcblxuICAgIGlmICjJtWl2eUVuYWJsZWQpIHtcbiAgICAgIGluamVjdG9yTm90aWZpZXIkID0gZW5zdXJlSW5qZWN0b3JOb3RpZmllcklzQ2FwdHVyZWQodGFyZ2V0KTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHtcbiAgICAgIFtzZWxlY3RvcklkXToge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIFtuYW1lXToge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICBpZiAodGhpc1tzZWxlY3RvcklkXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbc2VsZWN0b3JJZF07XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFRoZSBgbG9jYWxJbmplY3RgIHdpbGwgYmUgdHJlZS1zaGFrZW4gYXdheSBpbiBhcHBzIHRoYXRcbiAgICAgICAgICAvLyBzdGlsbCB1c2UgdGhlIFZpZXcgRW5naW5lLlxuICAgICAgICAgIGlmICjJtWl2eUVuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXNbc2VsZWN0b3JJZF0gPSBpbmplY3Rvck5vdGlmaWVyJCEucGlwZShcbiAgICAgICAgICAgICAgbWVyZ2VNYXAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JlID0gbG9jYWxJbmplY3QodGhpcywgU3RvcmUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IGxvY2FsSW5qZWN0KHRoaXMsIE5neHNDb25maWcpO1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgY3JlYXRlU2VsZWN0b3JGbihjb25maWcsIG5hbWUsIHJhd1NlbGVjdG9yLCBwYXRocyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVNlbGVjdE9ic2VydmFibGUoc2VsZWN0b3IsIHN0b3JlKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgY3JlYXRlU2VsZWN0b3JGbihudWxsLCBuYW1lLCByYXdTZWxlY3RvciwgcGF0aHMpO1xuICAgICAgICAgICAgdGhpc1tzZWxlY3RvcklkXSA9IGNyZWF0ZVNlbGVjdE9ic2VydmFibGUoc2VsZWN0b3IsIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpc1tzZWxlY3RvcklkXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gS2VlcCB0aGlzIGBpZmAgZ3VhcmQgaGVyZSBzbyB0aGUgYmVsb3cgc3R1ZmYgd2lsbCBiZSB0cmVlLXNoYWtlbiBhd2F5IGluIGFwcHMgdGhhdCBzdGlsbCB1c2UgdGhlIFZpZXcgRW5naW5lLlxuICAgIGlmICjJtWl2eUVuYWJsZWQpIHtcbiAgICAgIGVuc3VyZUxvY2FsSW5qZWN0b3JDYXB0dXJlZCh0YXJnZXQpO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==