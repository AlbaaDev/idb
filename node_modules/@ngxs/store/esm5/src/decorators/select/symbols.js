/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ɵivyEnabled } from '@angular/core';
import { propGetter } from '../../internal/internals';
import { SelectFactory } from './select-factory';
import { throwSelectFactoryNotConnectedError } from '../../configs/messages.config';
/** @type {?} */
var DOLLAR_CHAR_CODE = 36;
/**
 * @template T
 * @param {?} selector
 * @param {?} store
 * @return {?}
 */
export function createSelectObservable(selector, store) {
    // We're doing this stuff to tree-shake the `SelectFactory` when the user
    // is running Ivy since NGXS will select the state from the provided `store` argument.
    return ɵivyEnabled
        ? createSelectObservableIvy(selector, store)
        : createSelectObservableViewEngine(selector);
}
/**
 * @param {?} config
 * @param {?} name
 * @param {?=} rawSelector
 * @param {?=} paths
 * @return {?}
 */
export function createSelectorFn(config, name, rawSelector, paths) {
    if (paths === void 0) { paths = []; }
    rawSelector = rawSelector || removeDollarAtTheEnd(name);
    if (typeof rawSelector !== 'string') {
        return rawSelector;
    }
    else {
        /** @type {?} */
        var propsArray = paths.length
            ? tslib_1.__spread([rawSelector], paths) : rawSelector.split('.');
        return ɵivyEnabled
            ? createSelectorFnIvy(propsArray, config)
            : createSelectorFnViewEngine(propsArray);
    }
}
/**
 * \@example If `foo$` => make it just `foo`
 * @param {?} name
 * @return {?}
 */
export function removeDollarAtTheEnd(name) {
    /** @type {?} */
    var lastCharIndex = name.length - 1;
    /** @type {?} */
    var dollarAtTheEnd = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;
    return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;
}
/**
 * @template T
 * @param {?} selector
 * @param {?} store
 * @return {?}
 */
function createSelectObservableIvy(selector, store) {
    return ngDevMode && !store ? throwSelectFactoryNotConnectedError() : (/** @type {?} */ (store)).select(selector);
}
/**
 * @template T
 * @param {?} selector
 * @return {?}
 */
function createSelectObservableViewEngine(selector) {
    return SelectFactory.store
        ? SelectFactory.store.select(selector)
        : throwSelectFactoryNotConnectedError();
}
/**
 * @param {?} propsArray
 * @param {?} config
 * @return {?}
 */
function createSelectorFnIvy(propsArray, config) {
    return ngDevMode && !config
        ? throwSelectFactoryNotConnectedError()
        : propGetter(propsArray, (/** @type {?} */ (config)));
}
/**
 * @param {?} propsArray
 * @return {?}
 */
function createSelectorFnViewEngine(propsArray) {
    return propGetter(propsArray, (/** @type {?} */ (SelectFactory.config)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL2RlY29yYXRvcnMvc2VsZWN0L3N5bWJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQVEsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHakQsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sK0JBQStCLENBQUM7O0lBRTlFLGdCQUFnQixHQUFHLEVBQUU7Ozs7Ozs7QUFFM0IsTUFBTSxVQUFVLHNCQUFzQixDQUNwQyxRQUFhLEVBQ2IsS0FBbUI7SUFFbkIseUVBQXlFO0lBQ3pFLHNGQUFzRjtJQUN0RixPQUFPLFdBQVc7UUFDaEIsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7UUFDNUMsQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pELENBQUM7Ozs7Ozs7O0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixNQUF5QixFQUN6QixJQUFZLEVBQ1osV0FBaUIsRUFDakIsS0FBb0I7SUFBcEIsc0JBQUEsRUFBQSxVQUFvQjtJQUVwQixXQUFXLEdBQUcsV0FBVyxJQUFJLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXhELElBQUksT0FBTyxXQUFXLEtBQUssUUFBUSxFQUFFO1FBQ25DLE9BQU8sV0FBVyxDQUFDO0tBQ3BCO1NBQU07O1lBQ0MsVUFBVSxHQUFhLEtBQUssQ0FBQyxNQUFNO1lBQ3ZDLENBQUMsbUJBQUUsV0FBVyxHQUFLLEtBQUssRUFDeEIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBRTFCLE9BQU8sV0FBVztZQUNoQixDQUFDLENBQUMsbUJBQW1CLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQztZQUN6QyxDQUFDLENBQUMsMEJBQTBCLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDNUM7QUFDSCxDQUFDOzs7Ozs7QUFLRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsSUFBWTs7UUFDekMsYUFBYSxHQUFXLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQzs7UUFDdkMsY0FBYyxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssZ0JBQWdCO0lBQ25GLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzlELENBQUM7Ozs7Ozs7QUFjRCxTQUFTLHlCQUF5QixDQUNoQyxRQUFhLEVBQ2IsS0FBbUI7SUFFbkIsT0FBTyxTQUFTLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLG1DQUFtQyxFQUFFLENBQUMsQ0FBQyxDQUFDLG1CQUFBLEtBQUssRUFBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvRixDQUFDOzs7Ozs7QUFFRCxTQUFTLGdDQUFnQyxDQUFVLFFBQWE7SUFDOUQsT0FBTyxhQUFhLENBQUMsS0FBSztRQUN4QixDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxtQ0FBbUMsRUFBRSxDQUFDO0FBQzVDLENBQUM7Ozs7OztBQUVELFNBQVMsbUJBQW1CLENBQUMsVUFBb0IsRUFBRSxNQUF5QjtJQUMxRSxPQUFPLFNBQVMsSUFBSSxDQUFDLE1BQU07UUFDekIsQ0FBQyxDQUFDLG1DQUFtQyxFQUFFO1FBQ3ZDLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLG1CQUFBLE1BQU0sRUFBQyxDQUFDLENBQUM7QUFDdEMsQ0FBQzs7Ozs7QUFFRCxTQUFTLDBCQUEwQixDQUFDLFVBQW9CO0lBQ3RELE9BQU8sVUFBVSxDQUFDLFVBQVUsRUFBRSxtQkFBQSxhQUFhLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQztBQUN2RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSwgybVpdnlFbmFibGVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnLi4vLi4vc3RvcmUnO1xuaW1wb3J0IHsgTmd4c0NvbmZpZyB9IGZyb20gJy4uLy4uL3N5bWJvbHMnO1xuaW1wb3J0IHsgcHJvcEdldHRlciB9IGZyb20gJy4uLy4uL2ludGVybmFsL2ludGVybmFscyc7XG5pbXBvcnQgeyBTZWxlY3RGYWN0b3J5IH0gZnJvbSAnLi9zZWxlY3QtZmFjdG9yeSc7XG5pbXBvcnQgeyBTdGF0ZVRva2VuIH0gZnJvbSAnLi4vLi4vc3RhdGUtdG9rZW4vc3RhdGUtdG9rZW4nO1xuaW1wb3J0IHsgRXh0cmFjdFRva2VuVHlwZSB9IGZyb20gJy4uLy4uL3N0YXRlLXRva2VuL3N5bWJvbHMnO1xuaW1wb3J0IHsgdGhyb3dTZWxlY3RGYWN0b3J5Tm90Q29ubmVjdGVkRXJyb3IgfSBmcm9tICcuLi8uLi9jb25maWdzL21lc3NhZ2VzLmNvbmZpZyc7XG5cbmNvbnN0IERPTExBUl9DSEFSX0NPREUgPSAzNjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdE9ic2VydmFibGU8VCA9IGFueT4oXG4gIHNlbGVjdG9yOiBhbnksXG4gIHN0b3JlOiBTdG9yZSB8IG51bGxcbik6IE9ic2VydmFibGU8VD4ge1xuICAvLyBXZSdyZSBkb2luZyB0aGlzIHN0dWZmIHRvIHRyZWUtc2hha2UgdGhlIGBTZWxlY3RGYWN0b3J5YCB3aGVuIHRoZSB1c2VyXG4gIC8vIGlzIHJ1bm5pbmcgSXZ5IHNpbmNlIE5HWFMgd2lsbCBzZWxlY3QgdGhlIHN0YXRlIGZyb20gdGhlIHByb3ZpZGVkIGBzdG9yZWAgYXJndW1lbnQuXG4gIHJldHVybiDJtWl2eUVuYWJsZWRcbiAgICA/IGNyZWF0ZVNlbGVjdE9ic2VydmFibGVJdnkoc2VsZWN0b3IsIHN0b3JlKVxuICAgIDogY3JlYXRlU2VsZWN0T2JzZXJ2YWJsZVZpZXdFbmdpbmUoc2VsZWN0b3IpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JGbihcbiAgY29uZmlnOiBOZ3hzQ29uZmlnIHwgbnVsbCxcbiAgbmFtZTogc3RyaW5nLFxuICByYXdTZWxlY3Rvcj86IGFueSxcbiAgcGF0aHM6IHN0cmluZ1tdID0gW11cbik6IFNlbGVjdG9yRm4ge1xuICByYXdTZWxlY3RvciA9IHJhd1NlbGVjdG9yIHx8IHJlbW92ZURvbGxhckF0VGhlRW5kKG5hbWUpO1xuXG4gIGlmICh0eXBlb2YgcmF3U2VsZWN0b3IgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHJhd1NlbGVjdG9yO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHByb3BzQXJyYXk6IHN0cmluZ1tdID0gcGF0aHMubGVuZ3RoXG4gICAgICA/IFtyYXdTZWxlY3RvciwgLi4ucGF0aHNdXG4gICAgICA6IHJhd1NlbGVjdG9yLnNwbGl0KCcuJyk7XG5cbiAgICByZXR1cm4gybVpdnlFbmFibGVkXG4gICAgICA/IGNyZWF0ZVNlbGVjdG9yRm5JdnkocHJvcHNBcnJheSwgY29uZmlnKVxuICAgICAgOiBjcmVhdGVTZWxlY3RvckZuVmlld0VuZ2luZShwcm9wc0FycmF5KTtcbiAgfVxufVxuXG4vKipcbiAqIEBleGFtcGxlIElmIGBmb28kYCA9PiBtYWtlIGl0IGp1c3QgYGZvb2BcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZURvbGxhckF0VGhlRW5kKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGxhc3RDaGFySW5kZXg6IG51bWJlciA9IG5hbWUubGVuZ3RoIC0gMTtcbiAgY29uc3QgZG9sbGFyQXRUaGVFbmQ6IGJvb2xlYW4gPSBuYW1lLmNoYXJDb2RlQXQobGFzdENoYXJJbmRleCkgPT09IERPTExBUl9DSEFSX0NPREU7XG4gIHJldHVybiBkb2xsYXJBdFRoZUVuZCA/IG5hbWUuc2xpY2UoMCwgbGFzdENoYXJJbmRleCkgOiBuYW1lO1xufVxuXG5leHBvcnQgdHlwZSBTZWxlY3RvckZuID1cbiAgfCAoKHN0YXRlOiBhbnksIC4uLnN0YXRlczogYW55W10pID0+IGFueSlcbiAgfCBzdHJpbmdcbiAgfCBUeXBlPGFueT5cbiAgfCBTdGF0ZVRva2VuPGFueT47XG5cbmV4cG9ydCB0eXBlIFByb3BlcnR5VHlwZTxUPiA9IFQgZXh0ZW5kcyBTdGF0ZVRva2VuPGFueT5cbiAgPyBPYnNlcnZhYmxlPEV4dHJhY3RUb2tlblR5cGU8VD4+XG4gIDogVCBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55XG4gID8gT2JzZXJ2YWJsZTxSZXR1cm5UeXBlPFQ+PlxuICA6IGFueTtcblxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0T2JzZXJ2YWJsZUl2eTxUID0gYW55PihcbiAgc2VsZWN0b3I6IGFueSxcbiAgc3RvcmU6IFN0b3JlIHwgbnVsbFxuKTogT2JzZXJ2YWJsZTxUPiB7XG4gIHJldHVybiBuZ0Rldk1vZGUgJiYgIXN0b3JlID8gdGhyb3dTZWxlY3RGYWN0b3J5Tm90Q29ubmVjdGVkRXJyb3IoKSA6IHN0b3JlIS5zZWxlY3Qoc2VsZWN0b3IpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RPYnNlcnZhYmxlVmlld0VuZ2luZTxUID0gYW55PihzZWxlY3RvcjogYW55KTogT2JzZXJ2YWJsZTxUPiB7XG4gIHJldHVybiBTZWxlY3RGYWN0b3J5LnN0b3JlXG4gICAgPyBTZWxlY3RGYWN0b3J5LnN0b3JlLnNlbGVjdChzZWxlY3RvcilcbiAgICA6IHRocm93U2VsZWN0RmFjdG9yeU5vdENvbm5lY3RlZEVycm9yKCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yRm5JdnkocHJvcHNBcnJheTogc3RyaW5nW10sIGNvbmZpZzogTmd4c0NvbmZpZyB8IG51bGwpIHtcbiAgcmV0dXJuIG5nRGV2TW9kZSAmJiAhY29uZmlnXG4gICAgPyB0aHJvd1NlbGVjdEZhY3RvcnlOb3RDb25uZWN0ZWRFcnJvcigpXG4gICAgOiBwcm9wR2V0dGVyKHByb3BzQXJyYXksIGNvbmZpZyEpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RvckZuVmlld0VuZ2luZShwcm9wc0FycmF5OiBzdHJpbmdbXSkge1xuICByZXR1cm4gcHJvcEdldHRlcihwcm9wc0FycmF5LCBTZWxlY3RGYWN0b3J5LmNvbmZpZyEpO1xufVxuIl19