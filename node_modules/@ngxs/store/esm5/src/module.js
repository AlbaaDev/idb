/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { APP_BOOTSTRAP_LISTENER, InjectionToken, NgModule } from '@angular/core';
import { INITIAL_STATE_TOKEN, InitialState, NGXS_STATE_CONTEXT_FACTORY, NGXS_STATE_FACTORY, NgxsBootstrapper } from '@ngxs/store/internals';
import { FEATURE_STATE_TOKEN, NgxsConfig, ROOT_STATE_TOKEN } from './symbols';
import { NGXS_EXECUTION_STRATEGY } from './execution/symbols';
import { StateFactory } from './internal/state-factory';
import { StateContextFactory } from './internal/state-context-factory';
import { Actions, InternalActions } from './actions-stream';
import { LifecycleStateManager } from './internal/lifecycle-state-manager';
import { InternalDispatchedActionResults, InternalDispatcher } from './internal/dispatcher';
import { InternalStateOperations } from './internal/state-operations';
import { Store } from './store';
import { StateStream } from './internal/state-stream';
import { PluginManager } from './plugin-manager';
import { NgxsRootModule } from './modules/ngxs-root.module';
import { NgxsFeatureModule } from './modules/ngxs-feature.module';
import { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';
import { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';
import { mergeDeep } from './utils/utils';
/**
 * Ngxs Module
 */
var NgxsModule = /** @class */ (function () {
    function NgxsModule() {
    }
    /**
     * Root module factory
     */
    /**
     * Root module factory
     * @param {?=} states
     * @param {?=} options
     * @return {?}
     */
    NgxsModule.forRoot = /**
     * Root module factory
     * @param {?=} states
     * @param {?=} options
     * @return {?}
     */
    function (states, options) {
        if (states === void 0) { states = []; }
        if (options === void 0) { options = {}; }
        return {
            ngModule: NgxsRootModule,
            providers: tslib_1.__spread([
                StateFactory,
                StateContextFactory,
                Actions,
                InternalActions,
                NgxsBootstrapper,
                LifecycleStateManager,
                InternalDispatcher,
                InternalDispatchedActionResults,
                InternalStateOperations,
                InternalNgxsExecutionStrategy,
                Store,
                StateStream,
                PluginManager
            ], states, NgxsModule.ngxsTokenProviders(states, options))
        };
    };
    /**
     * Feature module factory
     */
    /**
     * Feature module factory
     * @param {?=} states
     * @return {?}
     */
    NgxsModule.forFeature = /**
     * Feature module factory
     * @param {?=} states
     * @return {?}
     */
    function (states) {
        if (states === void 0) { states = []; }
        return {
            ngModule: NgxsFeatureModule,
            providers: tslib_1.__spread([
                StateFactory,
                PluginManager
            ], states, [
                {
                    provide: FEATURE_STATE_TOKEN,
                    multi: true,
                    useValue: states
                }
            ])
        };
    };
    /**
     * @private
     * @param {?} states
     * @param {?} options
     * @return {?}
     */
    NgxsModule.ngxsTokenProviders = /**
     * @private
     * @param {?} states
     * @param {?} options
     * @return {?}
     */
    function (states, options) {
        return [
            {
                provide: NGXS_EXECUTION_STRATEGY,
                useClass: options.executionStrategy || DispatchOutsideZoneNgxsExecutionStrategy
            },
            {
                provide: ROOT_STATE_TOKEN,
                useValue: states
            },
            {
                provide: NgxsModule.ROOT_OPTIONS,
                useValue: options
            },
            {
                provide: NgxsConfig,
                useFactory: NgxsModule.ngxsConfigFactory,
                deps: [NgxsModule.ROOT_OPTIONS]
            },
            {
                provide: APP_BOOTSTRAP_LISTENER,
                useFactory: NgxsModule.appBootstrapListenerFactory,
                multi: true,
                deps: [NgxsBootstrapper]
            },
            {
                provide: INITIAL_STATE_TOKEN,
                useFactory: NgxsModule.getInitialState
            },
            {
                provide: NGXS_STATE_CONTEXT_FACTORY,
                useExisting: StateContextFactory
            },
            {
                provide: NGXS_STATE_FACTORY,
                useExisting: StateFactory
            }
        ];
    };
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    NgxsModule.ngxsConfigFactory = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return mergeDeep(new NgxsConfig(), options);
    };
    /**
     * @private
     * @param {?} bootstrapper
     * @return {?}
     */
    NgxsModule.appBootstrapListenerFactory = /**
     * @private
     * @param {?} bootstrapper
     * @return {?}
     */
    function (bootstrapper) {
        return (/**
         * @return {?}
         */
        function () { return bootstrapper.bootstrap(); });
    };
    /**
     * @private
     * @return {?}
     */
    NgxsModule.getInitialState = /**
     * @private
     * @return {?}
     */
    function () {
        return InitialState.pop();
    };
    NgxsModule.ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');
    NgxsModule.decorators = [
        { type: NgModule }
    ];
    return NgxsModule;
}());
export { NgxsModule };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsModule.ROOT_OPTIONS;
}
//# sourceMappingURL=data:application/json;base64,