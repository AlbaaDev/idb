/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ErrorHandler, Injectable, Injector } from '@angular/core';
import { EMPTY, forkJoin, of, Subject, throwError } from 'rxjs';
import { exhaustMap, filter, shareReplay, take } from 'rxjs/operators';
import { compose } from '../utils/compose';
import { InternalActions } from '../actions-stream';
import { StateStream } from './state-stream';
import { PluginManager } from '../plugin-manager';
import { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';
import { leaveNgxs } from '../operators/leave-ngxs';
import { getActionTypeFromInstance } from '../utils/utils';
/**
 * Internal Action result stream that is emitted when an action is completed.
 * This is used as a method of returning the action result to the dispatcher
 * for the observable returned by the dispatch(...) call.
 * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.
 */
var InternalDispatchedActionResults = /** @class */ (function (_super) {
    tslib_1.__extends(InternalDispatchedActionResults, _super);
    function InternalDispatchedActionResults() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InternalDispatchedActionResults.decorators = [
        { type: Injectable }
    ];
    return InternalDispatchedActionResults;
}(Subject));
export { InternalDispatchedActionResults };
var InternalDispatcher = /** @class */ (function () {
    function InternalDispatcher(_injector, _actions, _actionResults, _pluginManager, _stateStream, _ngxsExecutionStrategy) {
        this._injector = _injector;
        this._actions = _actions;
        this._actionResults = _actionResults;
        this._pluginManager = _pluginManager;
        this._stateStream = _stateStream;
        this._ngxsExecutionStrategy = _ngxsExecutionStrategy;
    }
    /**
     * Dispatches event(s).
     */
    /**
     * Dispatches event(s).
     * @param {?} actionOrActions
     * @return {?}
     */
    InternalDispatcher.prototype.dispatch = /**
     * Dispatches event(s).
     * @param {?} actionOrActions
     * @return {?}
     */
    function (actionOrActions) {
        var _this = this;
        /** @type {?} */
        var result = this._ngxsExecutionStrategy.enter((/**
         * @return {?}
         */
        function () {
            return _this.dispatchByEvents(actionOrActions);
        }));
        result.subscribe({
            error: (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                return _this._ngxsExecutionStrategy.leave((/**
                 * @return {?}
                 */
                function () {
                    try {
                        // Retrieve lazily to avoid cyclic dependency exception
                        _this._errorHandler = _this._errorHandler || _this._injector.get(ErrorHandler);
                        _this._errorHandler.handleError(error);
                    }
                    catch (_a) { }
                }));
            })
        });
        return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));
    };
    /**
     * @private
     * @param {?} actionOrActions
     * @return {?}
     */
    InternalDispatcher.prototype.dispatchByEvents = /**
     * @private
     * @param {?} actionOrActions
     * @return {?}
     */
    function (actionOrActions) {
        var _this = this;
        if (Array.isArray(actionOrActions)) {
            if (actionOrActions.length === 0)
                return of(this._stateStream.getValue());
            return forkJoin(actionOrActions.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return _this.dispatchSingle(action); })));
        }
        else {
            return this.dispatchSingle(actionOrActions);
        }
    };
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    InternalDispatcher.prototype.dispatchSingle = /**
     * @private
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var _this = this;
        /** @type {?} */
        var type = getActionTypeFromInstance(action);
        if (!type) {
            /** @type {?} */
            var error = new Error("This action doesn't have a type property: " + action.constructor.name);
            return throwError(error);
        }
        /** @type {?} */
        var prevState = this._stateStream.getValue();
        /** @type {?} */
        var plugins = this._pluginManager.plugins;
        return ((/** @type {?} */ (compose(tslib_1.__spread(plugins, [
            (/**
             * @param {?} nextState
             * @param {?} nextAction
             * @return {?}
             */
            function (nextState, nextAction) {
                if (nextState !== prevState) {
                    _this._stateStream.next(nextState);
                }
                /** @type {?} */
                var actionResult$ = _this.getActionResultStream(nextAction);
                actionResult$.subscribe((/**
                 * @param {?} ctx
                 * @return {?}
                 */
                function (ctx) { return _this._actions.next(ctx); }));
                _this._actions.next({ action: nextAction, status: "DISPATCHED" /* Dispatched */ });
                return _this.createDispatchObservable(actionResult$);
            })
        ]))(prevState, action)))).pipe(shareReplay());
    };
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    InternalDispatcher.prototype.getActionResultStream = /**
     * @private
     * @param {?} action
     * @return {?}
     */
    function (action) {
        return this._actionResults.pipe(filter((/**
         * @param {?} ctx
         * @return {?}
         */
        function (ctx) { return ctx.action === action && ctx.status !== "DISPATCHED" /* Dispatched */; })), take(1), shareReplay());
    };
    /**
     * @private
     * @param {?} actionResult$
     * @return {?}
     */
    InternalDispatcher.prototype.createDispatchObservable = /**
     * @private
     * @param {?} actionResult$
     * @return {?}
     */
    function (actionResult$) {
        var _this = this;
        return actionResult$
            .pipe(exhaustMap((/**
         * @param {?} ctx
         * @return {?}
         */
        function (ctx) {
            switch (ctx.status) {
                case "SUCCESSFUL" /* Successful */:
                    return of(_this._stateStream.getValue());
                case "ERRORED" /* Errored */:
                    return throwError(ctx.error);
                default:
                    return EMPTY;
            }
        })))
            .pipe(shareReplay());
    };
    InternalDispatcher.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    InternalDispatcher.ctorParameters = function () { return [
        { type: Injector },
        { type: InternalActions },
        { type: InternalDispatchedActionResults },
        { type: PluginManager },
        { type: StateStream },
        { type: InternalNgxsExecutionStrategy }
    ]; };
    return InternalDispatcher;
}());
export { InternalDispatcher };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InternalDispatcher.prototype._errorHandler;
    /**
     * @type {?}
     * @private
     */
    InternalDispatcher.prototype._injector;
    /**
     * @type {?}
     * @private
     */
    InternalDispatcher.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    InternalDispatcher.prototype._actionResults;
    /**
     * @type {?}
     * @private
     */
    InternalDispatcher.prototype._pluginManager;
    /**
     * @type {?}
     * @private
     */
    InternalDispatcher.prototype._stateStream;
    /**
     * @type {?}
     * @private
     */
    InternalDispatcher.prototype._ngxsExecutionStrategy;
}
//# sourceMappingURL=data:application/json;base64,