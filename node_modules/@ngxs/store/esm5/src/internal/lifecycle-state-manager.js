/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NgxsBootstrapper } from '@ngxs/store/internals';
import { filter, mergeMap, tap } from 'rxjs/operators';
import { StateContextFactory } from './state-context-factory';
import { InternalStateOperations } from './state-operations';
import { getStateDiffChanges } from './internals';
var LifecycleStateManager = /** @class */ (function () {
    function LifecycleStateManager(internalStateOperations, stateContextFactory, bootstrapper) {
        this.internalStateOperations = internalStateOperations;
        this.stateContextFactory = stateContextFactory;
        this.bootstrapper = bootstrapper;
    }
    /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    LifecycleStateManager.prototype.ngxsBootstrap = /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    function (action, results) {
        var _this = this;
        this.internalStateOperations
            .getRootStateOperations()
            .dispatch(action)
            .pipe(filter((/**
         * @return {?}
         */
        function () { return !!results; })), tap((/**
         * @return {?}
         */
        function () { return _this.invokeInit((/** @type {?} */ (results)).states); })), mergeMap((/**
         * @return {?}
         */
        function () { return _this.bootstrapper.appBootstrapped$; })), filter((/**
         * @param {?} appBootstrapped
         * @return {?}
         */
        function (appBootstrapped) { return !!appBootstrapped; })))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.invokeBootstrap((/** @type {?} */ (results)).states); }));
    };
    /**
     * Invoke the init function on the states.
     */
    /**
     * Invoke the init function on the states.
     * @param {?} mappedStores
     * @return {?}
     */
    LifecycleStateManager.prototype.invokeInit = /**
     * Invoke the init function on the states.
     * @param {?} mappedStores
     * @return {?}
     */
    function (mappedStores) {
        var e_1, _a;
        try {
            for (var mappedStores_1 = tslib_1.__values(mappedStores), mappedStores_1_1 = mappedStores_1.next(); !mappedStores_1_1.done; mappedStores_1_1 = mappedStores_1.next()) {
                var mappedStore = mappedStores_1_1.value;
                /** @type {?} */
                var instance = mappedStore.instance;
                if (instance.ngxsOnChanges) {
                    /** @type {?} */
                    var currentAppState = {};
                    /** @type {?} */
                    var newAppState = this.internalStateOperations
                        .getRootStateOperations()
                        .getState();
                    /** @type {?} */
                    var firstDiffChange = getStateDiffChanges(mappedStore, {
                        currentAppState: currentAppState,
                        newAppState: newAppState
                    });
                    instance.ngxsOnChanges(firstDiffChange);
                }
                if (instance.ngxsOnInit) {
                    instance.ngxsOnInit(this.getStateContext(mappedStore));
                }
                mappedStore.isInitialised = true;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (mappedStores_1_1 && !mappedStores_1_1.done && (_a = mappedStores_1.return)) _a.call(mappedStores_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Invoke the bootstrap function on the states.
     */
    /**
     * Invoke the bootstrap function on the states.
     * @param {?} mappedStores
     * @return {?}
     */
    LifecycleStateManager.prototype.invokeBootstrap = /**
     * Invoke the bootstrap function on the states.
     * @param {?} mappedStores
     * @return {?}
     */
    function (mappedStores) {
        var e_2, _a;
        try {
            for (var mappedStores_2 = tslib_1.__values(mappedStores), mappedStores_2_1 = mappedStores_2.next(); !mappedStores_2_1.done; mappedStores_2_1 = mappedStores_2.next()) {
                var mappedStore = mappedStores_2_1.value;
                /** @type {?} */
                var instance = mappedStore.instance;
                if (instance.ngxsAfterBootstrap) {
                    instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (mappedStores_2_1 && !mappedStores_2_1.done && (_a = mappedStores_2.return)) _a.call(mappedStores_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * @private
     * @param {?} mappedStore
     * @return {?}
     */
    LifecycleStateManager.prototype.getStateContext = /**
     * @private
     * @param {?} mappedStore
     * @return {?}
     */
    function (mappedStore) {
        return this.stateContextFactory.createStateContext(mappedStore);
    };
    LifecycleStateManager.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LifecycleStateManager.ctorParameters = function () { return [
        { type: InternalStateOperations },
        { type: StateContextFactory },
        { type: NgxsBootstrapper }
    ]; };
    return LifecycleStateManager;
}());
export { LifecycleStateManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.internalStateOperations;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.stateContextFactory;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.bootstrapper;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmZWN5Y2xlLXN0YXRlLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9pbnRlcm5hbC9saWZlY3ljbGUtc3RhdGUtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFlLE1BQU0sdUJBQXVCLENBQUM7QUFDdEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDN0QsT0FBTyxFQUFFLG1CQUFtQixFQUFrQyxNQUFNLGFBQWEsQ0FBQztBQUdsRjtJQUVFLCtCQUNVLHVCQUFnRCxFQUNoRCxtQkFBd0MsRUFDeEMsWUFBOEI7UUFGOUIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUNoRCx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLGlCQUFZLEdBQVosWUFBWSxDQUFrQjtJQUNyQyxDQUFDOzs7Ozs7O0lBRUosNkNBQWE7Ozs7OztJQUFiLFVBQWlCLE1BQVMsRUFBRSxPQUFzQztRQUFsRSxpQkFXQztRQVZDLElBQUksQ0FBQyx1QkFBdUI7YUFDekIsc0JBQXNCLEVBQUU7YUFDeEIsUUFBUSxDQUFDLE1BQU0sQ0FBQzthQUNoQixJQUFJLENBQ0gsTUFBTTs7O1FBQUMsY0FBTSxPQUFBLENBQUMsQ0FBQyxPQUFPLEVBQVQsQ0FBUyxFQUFDLEVBQ3ZCLEdBQUc7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFBLE9BQU8sRUFBQyxDQUFDLE1BQU0sQ0FBQyxFQUFoQyxDQUFnQyxFQUFDLEVBQzNDLFFBQVE7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFsQyxDQUFrQyxFQUFDLEVBQ2xELE1BQU07Ozs7UUFBQyxVQUFBLGVBQWUsSUFBSSxPQUFBLENBQUMsQ0FBQyxlQUFlLEVBQWpCLENBQWlCLEVBQUMsQ0FDN0M7YUFDQSxTQUFTOzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGVBQWUsQ0FBQyxtQkFBQSxPQUFPLEVBQUMsQ0FBQyxNQUFNLENBQUMsRUFBckMsQ0FBcUMsRUFBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0gsMENBQVU7Ozs7O0lBQVYsVUFBVyxZQUEyQjs7O1lBQ3BDLEtBQTBCLElBQUEsaUJBQUEsaUJBQUEsWUFBWSxDQUFBLDBDQUFBLG9FQUFFO2dCQUFuQyxJQUFNLFdBQVcseUJBQUE7O29CQUNkLFFBQVEsR0FBa0IsV0FBVyxDQUFDLFFBQVE7Z0JBRXBELElBQUksUUFBUSxDQUFDLGFBQWEsRUFBRTs7d0JBQ3BCLGVBQWUsR0FBZ0IsRUFBRTs7d0JBQ2pDLFdBQVcsR0FBZ0IsSUFBSSxDQUFDLHVCQUF1Qjt5QkFDMUQsc0JBQXNCLEVBQUU7eUJBQ3hCLFFBQVEsRUFBRTs7d0JBRVAsZUFBZSxHQUFxQixtQkFBbUIsQ0FBQyxXQUFXLEVBQUU7d0JBQ3pFLGVBQWUsaUJBQUE7d0JBQ2YsV0FBVyxhQUFBO3FCQUNaLENBQUM7b0JBRUYsUUFBUSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztpQkFDekM7Z0JBRUQsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFO29CQUN2QixRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztpQkFDeEQ7Z0JBRUQsV0FBVyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7YUFDbEM7Ozs7Ozs7OztJQUNILENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0gsK0NBQWU7Ozs7O0lBQWYsVUFBZ0IsWUFBMkI7OztZQUN6QyxLQUEwQixJQUFBLGlCQUFBLGlCQUFBLFlBQVksQ0FBQSwwQ0FBQSxvRUFBRTtnQkFBbkMsSUFBTSxXQUFXLHlCQUFBOztvQkFDZCxRQUFRLEdBQWtCLFdBQVcsQ0FBQyxRQUFRO2dCQUNwRCxJQUFJLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRTtvQkFDL0IsUUFBUSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztpQkFDaEU7YUFDRjs7Ozs7Ozs7O0lBQ0gsQ0FBQzs7Ozs7O0lBRU8sK0NBQWU7Ozs7O0lBQXZCLFVBQXdCLFdBQXdCO1FBQzlDLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7O2dCQWhFRixVQUFVOzs7O2dCQUpGLHVCQUF1QjtnQkFEdkIsbUJBQW1CO2dCQUhuQixnQkFBZ0I7O0lBeUV6Qiw0QkFBQztDQUFBLEFBakVELElBaUVDO1NBaEVZLHFCQUFxQjs7Ozs7O0lBRTlCLHdEQUF3RDs7Ozs7SUFDeEQsb0RBQWdEOzs7OztJQUNoRCw2Q0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hzQm9vdHN0cmFwcGVyLCBQbGFpbk9iamVjdCB9IGZyb20gJ0BuZ3hzL3N0b3JlL2ludGVybmFscyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1lcmdlTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFN0YXRlQ29udGV4dEZhY3RvcnkgfSBmcm9tICcuL3N0YXRlLWNvbnRleHQtZmFjdG9yeSc7XG5pbXBvcnQgeyBJbnRlcm5hbFN0YXRlT3BlcmF0aW9ucyB9IGZyb20gJy4vc3RhdGUtb3BlcmF0aW9ucyc7XG5pbXBvcnQgeyBnZXRTdGF0ZURpZmZDaGFuZ2VzLCBNYXBwZWRTdG9yZSwgU3RhdGVzQW5kRGVmYXVsdHMgfSBmcm9tICcuL2ludGVybmFscyc7XG5pbXBvcnQgeyBOZ3hzTGlmZUN5Y2xlLCBOZ3hzU2ltcGxlQ2hhbmdlLCBTdGF0ZUNvbnRleHQgfSBmcm9tICcuLi9zeW1ib2xzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExpZmVjeWNsZVN0YXRlTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW50ZXJuYWxTdGF0ZU9wZXJhdGlvbnM6IEludGVybmFsU3RhdGVPcGVyYXRpb25zLFxuICAgIHByaXZhdGUgc3RhdGVDb250ZXh0RmFjdG9yeTogU3RhdGVDb250ZXh0RmFjdG9yeSxcbiAgICBwcml2YXRlIGJvb3RzdHJhcHBlcjogTmd4c0Jvb3RzdHJhcHBlclxuICApIHt9XG5cbiAgbmd4c0Jvb3RzdHJhcDxUPihhY3Rpb246IFQsIHJlc3VsdHM6IFN0YXRlc0FuZERlZmF1bHRzIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gICAgdGhpcy5pbnRlcm5hbFN0YXRlT3BlcmF0aW9uc1xuICAgICAgLmdldFJvb3RTdGF0ZU9wZXJhdGlvbnMoKVxuICAgICAgLmRpc3BhdGNoKGFjdGlvbilcbiAgICAgIC5waXBlKFxuICAgICAgICBmaWx0ZXIoKCkgPT4gISFyZXN1bHRzKSxcbiAgICAgICAgdGFwKCgpID0+IHRoaXMuaW52b2tlSW5pdChyZXN1bHRzIS5zdGF0ZXMpKSxcbiAgICAgICAgbWVyZ2VNYXAoKCkgPT4gdGhpcy5ib290c3RyYXBwZXIuYXBwQm9vdHN0cmFwcGVkJCksXG4gICAgICAgIGZpbHRlcihhcHBCb290c3RyYXBwZWQgPT4gISFhcHBCb290c3RyYXBwZWQpXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHRoaXMuaW52b2tlQm9vdHN0cmFwKHJlc3VsdHMhLnN0YXRlcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGUgaW5pdCBmdW5jdGlvbiBvbiB0aGUgc3RhdGVzLlxuICAgKi9cbiAgaW52b2tlSW5pdChtYXBwZWRTdG9yZXM6IE1hcHBlZFN0b3JlW10pOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IG1hcHBlZFN0b3JlIG9mIG1hcHBlZFN0b3Jlcykge1xuICAgICAgY29uc3QgaW5zdGFuY2U6IE5neHNMaWZlQ3ljbGUgPSBtYXBwZWRTdG9yZS5pbnN0YW5jZTtcblxuICAgICAgaWYgKGluc3RhbmNlLm5neHNPbkNoYW5nZXMpIHtcbiAgICAgICAgY29uc3QgY3VycmVudEFwcFN0YXRlOiBQbGFpbk9iamVjdCA9IHt9O1xuICAgICAgICBjb25zdCBuZXdBcHBTdGF0ZTogUGxhaW5PYmplY3QgPSB0aGlzLmludGVybmFsU3RhdGVPcGVyYXRpb25zXG4gICAgICAgICAgLmdldFJvb3RTdGF0ZU9wZXJhdGlvbnMoKVxuICAgICAgICAgIC5nZXRTdGF0ZSgpO1xuXG4gICAgICAgIGNvbnN0IGZpcnN0RGlmZkNoYW5nZTogTmd4c1NpbXBsZUNoYW5nZSA9IGdldFN0YXRlRGlmZkNoYW5nZXMobWFwcGVkU3RvcmUsIHtcbiAgICAgICAgICBjdXJyZW50QXBwU3RhdGUsXG4gICAgICAgICAgbmV3QXBwU3RhdGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaW5zdGFuY2Uubmd4c09uQ2hhbmdlcyhmaXJzdERpZmZDaGFuZ2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5zdGFuY2Uubmd4c09uSW5pdCkge1xuICAgICAgICBpbnN0YW5jZS5uZ3hzT25Jbml0KHRoaXMuZ2V0U3RhdGVDb250ZXh0KG1hcHBlZFN0b3JlKSk7XG4gICAgICB9XG5cbiAgICAgIG1hcHBlZFN0b3JlLmlzSW5pdGlhbGlzZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhlIGJvb3RzdHJhcCBmdW5jdGlvbiBvbiB0aGUgc3RhdGVzLlxuICAgKi9cbiAgaW52b2tlQm9vdHN0cmFwKG1hcHBlZFN0b3JlczogTWFwcGVkU3RvcmVbXSkge1xuICAgIGZvciAoY29uc3QgbWFwcGVkU3RvcmUgb2YgbWFwcGVkU3RvcmVzKSB7XG4gICAgICBjb25zdCBpbnN0YW5jZTogTmd4c0xpZmVDeWNsZSA9IG1hcHBlZFN0b3JlLmluc3RhbmNlO1xuICAgICAgaWYgKGluc3RhbmNlLm5neHNBZnRlckJvb3RzdHJhcCkge1xuICAgICAgICBpbnN0YW5jZS5uZ3hzQWZ0ZXJCb290c3RyYXAodGhpcy5nZXRTdGF0ZUNvbnRleHQobWFwcGVkU3RvcmUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFN0YXRlQ29udGV4dChtYXBwZWRTdG9yZTogTWFwcGVkU3RvcmUpOiBTdGF0ZUNvbnRleHQ8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVDb250ZXh0RmFjdG9yeS5jcmVhdGVTdGF0ZUNvbnRleHQobWFwcGVkU3RvcmUpO1xuICB9XG59XG4iXX0=