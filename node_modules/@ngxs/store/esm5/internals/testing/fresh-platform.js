/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import { destroyPlatform, createPlatform } from '@angular/core';
/**
 * @return {?}
 */
function createRootElement() {
    /** @type {?} */
    var document = TestBed.inject(DOCUMENT);
    /** @type {?} */
    var root = getDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
/**
 * @return {?}
 */
function removeRootElement() {
    /** @type {?} */
    var root = (/** @type {?} */ (document.getElementsByTagName('app-root').item(0)));
    try {
        document.body.removeChild(root);
    }
    catch (_a) { }
}
/**
 * @return {?}
 */
function destroyPlatformBeforeBootstrappingTheNewOne() {
    destroyPlatform();
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
/**
 * @return {?}
 */
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    createPlatform(TestBed);
}
/**
 * @param {?} fn
 * @return {?}
 */
export function freshPlatform(fn) {
    /** @type {?} */
    var done = null;
    /** @type {?} */
    var whenDoneIsCalledPromise = null;
    /** @type {?} */
    var hasDoneArgument = fn.length === 1;
    if (hasDoneArgument) {
        whenDoneIsCalledPromise = new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            done = resolve;
        }));
    }
    return (/**
     * @return {?}
     */
    function testWithAFreshPlatform() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 6, 7]);
                        destroyPlatformBeforeBootstrappingTheNewOne();
                        if (!(done !== null)) return [3 /*break*/, 3];
                        return [4 /*yield*/, fn(done)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (/** @type {?} */ (whenDoneIsCalledPromise))];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, fn()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        resetPlatformAfterBootstrapping();
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlc2gtcGxhdGZvcm0uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy8iLCJzb3VyY2VzIjpbImZyZXNoLXBsYXRmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBRWhFLFNBQVMsaUJBQWlCOztRQUNsQixRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7O1FBQ25DLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQztJQUN6RCxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxDQUFDOzs7O0FBRUQsU0FBUyxpQkFBaUI7O1FBQ2xCLElBQUksR0FBWSxtQkFBQSxRQUFRLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDO0lBQ3hFLElBQUk7UUFDRixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNqQztJQUFDLFdBQU0sR0FBRTtBQUNaLENBQUM7Ozs7QUFFRCxTQUFTLDJDQUEyQztJQUNsRCxlQUFlLEVBQUUsQ0FBQztJQUNsQixpQkFBaUIsRUFBRSxDQUFDO0FBQ3RCLENBQUM7Ozs7Ozs7QUFLRCxTQUFTLCtCQUErQjtJQUN0QyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMxQixDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBMEM7O1FBQ2xFLElBQUksR0FBd0IsSUFBSTs7UUFDbEMsdUJBQXVCLEdBQXlCLElBQUk7O1FBRWhELGVBQWUsR0FBRyxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUM7SUFFdkMsSUFBSSxlQUFlLEVBQUU7UUFDbkIsdUJBQXVCLEdBQUcsSUFBSSxPQUFPOzs7O1FBQU8sVUFBQSxPQUFPO1lBQ2pELElBQUksR0FBRyxPQUFPLENBQUM7UUFDakIsQ0FBQyxFQUFDLENBQUM7S0FDSjtJQUVEOzs7SUFBTyxTQUFlLHNCQUFzQjs7Ozs7O3dCQUV4QywyQ0FBMkMsRUFBRSxDQUFDOzZCQUUxQyxDQUFBLElBQUksS0FBSyxJQUFJLENBQUEsRUFBYix3QkFBYTt3QkFDZixxQkFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUE7O3dCQUFkLFNBQWMsQ0FBQzt3QkFDZixxQkFBTSxtQkFBQSx1QkFBdUIsRUFBQyxFQUFBOzt3QkFBOUIsU0FBOEIsQ0FBQzs7NEJBRS9CLHFCQUFNLEVBQUUsRUFBRSxFQUFBOzt3QkFBVixTQUFVLENBQUM7Ozs7d0JBR2IsK0JBQStCLEVBQUUsQ0FBQzs7Ozs7O0tBRXJDLEVBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyDJtWdldERPTSBhcyBnZXRET00gfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IGRlc3Ryb3lQbGF0Zm9ybSwgY3JlYXRlUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZnVuY3Rpb24gY3JlYXRlUm9vdEVsZW1lbnQoKSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gVGVzdEJlZC5pbmplY3QoRE9DVU1FTlQpO1xuICBjb25zdCByb290ID0gZ2V0RE9NKCkuY3JlYXRlRWxlbWVudCgnYXBwLXJvb3QnLCBkb2N1bWVudCk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocm9vdCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJvb3RFbGVtZW50KCkge1xuICBjb25zdCByb290OiBFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2FwcC1yb290JykuaXRlbSgwKSE7XG4gIHRyeSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChyb290KTtcbiAgfSBjYXRjaCB7fVxufVxuXG5mdW5jdGlvbiBkZXN0cm95UGxhdGZvcm1CZWZvcmVCb290c3RyYXBwaW5nVGhlTmV3T25lKCkge1xuICBkZXN0cm95UGxhdGZvcm0oKTtcbiAgY3JlYXRlUm9vdEVsZW1lbnQoKTtcbn1cblxuLy8gQXMgd2UgY3JlYXRlIG91ciBjdXN0b20gcGxhdGZvcm0gdmlhIGBib290c3RyYXBNb2R1bGVgXG4vLyB3ZSBoYXZlIHRvIGRlc3Ryb3kgaXQgYWZ0ZXIgYXNzZXRpb25zIGFuZCByZXZlcnRcbi8vIHRoZSBwcmV2aW91cyBvbmVcbmZ1bmN0aW9uIHJlc2V0UGxhdGZvcm1BZnRlckJvb3RzdHJhcHBpbmcoKSB7XG4gIHJlbW92ZVJvb3RFbGVtZW50KCk7XG4gIGRlc3Ryb3lQbGF0Zm9ybSgpO1xuICBjcmVhdGVQbGF0Zm9ybShUZXN0QmVkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyZXNoUGxhdGZvcm0oZm46IChkb25lPzogVm9pZEZ1bmN0aW9uKSA9PiBQcm9taXNlPHZvaWQ+KSB7XG4gIGxldCBkb25lOiBWb2lkRnVuY3Rpb24gfCBudWxsID0gbnVsbCxcbiAgICB3aGVuRG9uZUlzQ2FsbGVkUHJvbWlzZTogUHJvbWlzZTx2b2lkPiB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0IGhhc0RvbmVBcmd1bWVudCA9IGZuLmxlbmd0aCA9PT0gMTtcblxuICBpZiAoaGFzRG9uZUFyZ3VtZW50KSB7XG4gICAgd2hlbkRvbmVJc0NhbGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcbiAgICAgIGRvbmUgPSByZXNvbHZlO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIHRlc3RXaXRoQUZyZXNoUGxhdGZvcm0oKSB7XG4gICAgdHJ5IHtcbiAgICAgIGRlc3Ryb3lQbGF0Zm9ybUJlZm9yZUJvb3RzdHJhcHBpbmdUaGVOZXdPbmUoKTtcblxuICAgICAgaWYgKGRvbmUgIT09IG51bGwpIHtcbiAgICAgICAgYXdhaXQgZm4oZG9uZSk7XG4gICAgICAgIGF3YWl0IHdoZW5Eb25lSXNDYWxsZWRQcm9taXNlITtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF3YWl0IGZuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHJlc2V0UGxhdGZvcm1BZnRlckJvb3RzdHJhcHBpbmcoKTtcbiAgICB9XG4gIH07XG59XG4iXX0=