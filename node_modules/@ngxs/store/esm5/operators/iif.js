/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isStateOperator, isUndefined, isPredicate } from './utils';
/**
 * @template T
 * @param {?} operatorOrValue
 * @param {?=} existing
 * @return {?}
 */
function retrieveValue(operatorOrValue, existing) {
    // If state operator is a function
    // then call it with an original value
    if (isStateOperator(operatorOrValue)) {
        /** @type {?} */
        var value = operatorOrValue((/** @type {?} */ ((/** @type {?} */ (existing)))));
        return (/** @type {?} */ (value));
    }
    // If operator or value was not provided
    // e.g. `elseOperatorOrValue` is `undefined`
    // then we just return an original value
    if (isUndefined(operatorOrValue)) {
        return (/** @type {?} */ ((/** @type {?} */ (((/** @type {?} */ (existing)))))));
    }
    return (/** @type {?} */ (operatorOrValue));
}
/**
 * @template T
 * @param {?} condition - Condition can be a plain boolean value or a function,
 * that returns boolean, also this function can take a value as an argument
 * to which this state operator applies
 * @param {?} trueOperatorOrValue - Any value or a state operator
 * @param {?=} elseOperatorOrValue - Any value or a state operator
 * @return {?}
 */
export function iif(condition, trueOperatorOrValue, elseOperatorOrValue) {
    return (/**
     * @param {?} existing
     * @return {?}
     */
    function iifOperator(existing) {
        // Convert the value to a boolean
        /** @type {?} */
        var result = !!condition;
        // but if it is a function then run it to get the result
        if (isPredicate(condition)) {
            result = condition(existing);
        }
        if (result) {
            return retrieveValue(trueOperatorOrValue, (/** @type {?} */ (existing)));
        }
        return retrieveValue((/** @type {?} */ (elseOperatorOrValue)), (/** @type {?} */ (existing)));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWlmLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvb3BlcmF0b3JzLyIsInNvdXJjZXMiOlsiaWlmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQXVCLE1BQU0sU0FBUyxDQUFDOzs7Ozs7O0FBR3pGLFNBQVMsYUFBYSxDQUNwQixlQUFxQyxFQUNyQyxRQUFrQztJQUVsQyxrQ0FBa0M7SUFDbEMsc0NBQXNDO0lBQ3RDLElBQUksZUFBZSxDQUFDLGVBQWUsQ0FBQyxFQUFFOztZQUM5QixLQUFLLEdBQUcsZUFBZSxDQUFDLG1CQUFBLG1CQUFBLFFBQVEsRUFBQyxFQUFlLENBQUM7UUFDdkQsT0FBTyxtQkFBQSxLQUFLLEVBQWlCLENBQUM7S0FDL0I7SUFFRCx3Q0FBd0M7SUFDeEMsNENBQTRDO0lBQzVDLHdDQUF3QztJQUN4QyxJQUFJLFdBQVcsQ0FBQyxlQUFlLENBQUMsRUFBRTtRQUNoQyxPQUFPLG1CQUFBLG1CQUFBLENBQUMsbUJBQUssUUFBUSxFQUFBLENBQUMsRUFBQyxFQUFpQixDQUFDO0tBQzFDO0lBRUQsT0FBTyxtQkFBQSxlQUFlLEVBQWlCLENBQUM7QUFDMUMsQ0FBQzs7Ozs7Ozs7OztBQVNELE1BQU0sVUFBVSxHQUFHLENBQ2pCLFNBQTBDLEVBQzFDLG1CQUFrRCxFQUNsRCxtQkFBbUQ7SUFFbkQ7Ozs7SUFBTyxTQUFTLFdBQVcsQ0FBQyxRQUFpQzs7O1lBRXZELE1BQU0sR0FBRyxDQUFDLENBQUMsU0FBUztRQUN4Qix3REFBd0Q7UUFDeEQsSUFBSSxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDMUIsTUFBTSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM5QjtRQUVELElBQUksTUFBTSxFQUFFO1lBQ1YsT0FBTyxhQUFhLENBQUksbUJBQW1CLEVBQUUsbUJBQUEsUUFBUSxFQUFpQixDQUFDLENBQUM7U0FDekU7UUFFRCxPQUFPLGFBQWEsQ0FBSSxtQkFBQSxtQkFBbUIsRUFBQyxFQUFFLG1CQUFBLFFBQVEsRUFBaUIsQ0FBQyxDQUFDO0lBQzNFLENBQUMsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0ZU9wZXJhdG9yIH0gZnJvbSAnQG5neHMvc3RvcmUnO1xuXG5pbXBvcnQgeyBpc1N0YXRlT3BlcmF0b3IsIGlzVW5kZWZpbmVkLCBpc1ByZWRpY2F0ZSwgUmVwYWlyVHlwZSwgTm9JbmZlciB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgUHJlZGljYXRlIH0gZnJvbSAnLi9pbnRlcm5hbHMnO1xuXG5mdW5jdGlvbiByZXRyaWV2ZVZhbHVlPFQ+KFxuICBvcGVyYXRvck9yVmFsdWU6IFN0YXRlT3BlcmF0b3I8VD4gfCBULFxuICBleGlzdGluZz86IFJlYWRvbmx5PFJlcGFpclR5cGU8VD4+XG4pOiBSZXBhaXJUeXBlPFQ+IHtcbiAgLy8gSWYgc3RhdGUgb3BlcmF0b3IgaXMgYSBmdW5jdGlvblxuICAvLyB0aGVuIGNhbGwgaXQgd2l0aCBhbiBvcmlnaW5hbCB2YWx1ZVxuICBpZiAoaXNTdGF0ZU9wZXJhdG9yKG9wZXJhdG9yT3JWYWx1ZSkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG9wZXJhdG9yT3JWYWx1ZShleGlzdGluZyEgYXMgUmVhZG9ubHk8VD4pO1xuICAgIHJldHVybiB2YWx1ZSBhcyBSZXBhaXJUeXBlPFQ+O1xuICB9XG5cbiAgLy8gSWYgb3BlcmF0b3Igb3IgdmFsdWUgd2FzIG5vdCBwcm92aWRlZFxuICAvLyBlLmcuIGBlbHNlT3BlcmF0b3JPclZhbHVlYCBpcyBgdW5kZWZpbmVkYFxuICAvLyB0aGVuIHdlIGp1c3QgcmV0dXJuIGFuIG9yaWdpbmFsIHZhbHVlXG4gIGlmIChpc1VuZGVmaW5lZChvcGVyYXRvck9yVmFsdWUpKSB7XG4gICAgcmV0dXJuICg8YW55PmV4aXN0aW5nKSEgYXMgUmVwYWlyVHlwZTxUPjtcbiAgfVxuXG4gIHJldHVybiBvcGVyYXRvck9yVmFsdWUgYXMgUmVwYWlyVHlwZTxUPjtcbn1cblxuLyoqXG4gKiBAcGFyYW0gY29uZGl0aW9uIC0gQ29uZGl0aW9uIGNhbiBiZSBhIHBsYWluIGJvb2xlYW4gdmFsdWUgb3IgYSBmdW5jdGlvbixcbiAqIHRoYXQgcmV0dXJucyBib29sZWFuLCBhbHNvIHRoaXMgZnVuY3Rpb24gY2FuIHRha2UgYSB2YWx1ZSBhcyBhbiBhcmd1bWVudFxuICogdG8gd2hpY2ggdGhpcyBzdGF0ZSBvcGVyYXRvciBhcHBsaWVzXG4gKiBAcGFyYW0gdHJ1ZU9wZXJhdG9yT3JWYWx1ZSAtIEFueSB2YWx1ZSBvciBhIHN0YXRlIG9wZXJhdG9yXG4gKiBAcGFyYW0gZWxzZU9wZXJhdG9yT3JWYWx1ZSAtIEFueSB2YWx1ZSBvciBhIHN0YXRlIG9wZXJhdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpaWY8VD4oXG4gIGNvbmRpdGlvbjogTm9JbmZlcjxQcmVkaWNhdGU8VD4+IHwgYm9vbGVhbixcbiAgdHJ1ZU9wZXJhdG9yT3JWYWx1ZTogTm9JbmZlcjxTdGF0ZU9wZXJhdG9yPFQ+PiB8IFQsXG4gIGVsc2VPcGVyYXRvck9yVmFsdWU/OiBOb0luZmVyPFN0YXRlT3BlcmF0b3I8VD4+IHwgVFxuKTogU3RhdGVPcGVyYXRvcjxSZXBhaXJUeXBlPFQ+PiB7XG4gIHJldHVybiBmdW5jdGlvbiBpaWZPcGVyYXRvcihleGlzdGluZzogUmVhZG9ubHk8UmVwYWlyVHlwZTxUPj4pOiBSZXBhaXJUeXBlPFQ+IHtcbiAgICAvLyBDb252ZXJ0IHRoZSB2YWx1ZSB0byBhIGJvb2xlYW5cbiAgICBsZXQgcmVzdWx0ID0gISFjb25kaXRpb247XG4gICAgLy8gYnV0IGlmIGl0IGlzIGEgZnVuY3Rpb24gdGhlbiBydW4gaXQgdG8gZ2V0IHRoZSByZXN1bHRcbiAgICBpZiAoaXNQcmVkaWNhdGUoY29uZGl0aW9uKSkge1xuICAgICAgcmVzdWx0ID0gY29uZGl0aW9uKGV4aXN0aW5nKTtcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gcmV0cmlldmVWYWx1ZTxUPih0cnVlT3BlcmF0b3JPclZhbHVlLCBleGlzdGluZyBhcyBSZXBhaXJUeXBlPFQ+KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0cmlldmVWYWx1ZTxUPihlbHNlT3BlcmF0b3JPclZhbHVlISwgZXhpc3RpbmcgYXMgUmVwYWlyVHlwZTxUPik7XG4gIH07XG59XG4iXX0=